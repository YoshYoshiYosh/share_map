require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe PinsController, type: :controller do
  

  # This should return the minimal set of attributes required to create a valid
  # Pin. As you add validations to Pin, be sure to
  # adjust the attributes here as well.
  
  let(:user) { FactoryBot.create(:user) }

  let(:map)  { FactoryBot.create(:map, author: user) }

  let(:same_author_pin) { FactoryBot.create(:pin, :same_author, map: map, author: user) }

  let(:valid_attributes) {
    {
      title: "hello",
      description: 'description',
      lonlat: '10 10'
    }
  }

  let(:tmp_valid_attributes) {
    {
      title: "hello",
      description: 'description',
      lonlat: '10 10'
    }
  }

  let(:invalid_attributes) {
    {
      title: nil,
      description: 'test',
      lonlat: '10 10'
    }
  }

  let(:map_and_pin_params) { { map_id: map.id, id: same_author_pin.id } }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # PinsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  context "user signed in" do
    login_user
    
    describe "GET #index" do
      it "returns a success response" do
        get :index, params: { map_id: map.id }, session: valid_session
        expect(response).to be_successful
      end
    end

    describe "GET #show" do
      it "returns a success response" do
        get :show, params: map_and_pin_params, session: valid_session
        expect(response).to be_successful
      end
    end

    describe "GET #new"  do
      it "returns a success response" do
        get :new, params: { map_id: map.id }, session: valid_session
        expect(response).to be_successful
      end
    end

    describe "GET #edit" do
      it "returns a success response" do
        get :edit, params: map_and_pin_params, session: valid_session
        expect(response).to be_successful
      end
    end

    describe "POST #create" do
      context "with valid params" do
        it "creates a new Pin" do
          expect {
            post :create, params: { map_id: map.id, pin: valid_attributes }, session: valid_session
          }.to change(Pin, :count).by(1)
        end

        it "redirects to the created pin" do
          post :create, params: { map_id: map.id,  pin: valid_attributes }, session: valid_session
          expect(response).to redirect_to([map, Pin.last])
        end
      end

      context "with invalid params" do
        it "returns a success response (i.e. to display the 'new' template)" do
          post :create, params: { map_id: map.id, pin: invalid_attributes }, session: valid_session
          expect(response).to be_successful
        end
      end
    end

    describe "PUT #update" do
      context "with valid params" do
        let(:new_attributes) {
          {
            title: "rename",
            description: 'rename',
            lonlat: '100 100'
          }
        }

        it "updates the requested pin" do
          put :update, params: { map_id: map.id, id: same_author_pin.id, pin: new_attributes }, session: valid_session
          same_author_pin.reload
          expect(same_author_pin.title).to eq 'rename'
        end

        it "redirects to the pin" do
          put :update, params: { map_id: map.id, id: same_author_pin.id, pin: new_attributes }, session: valid_session
          expect(response).to redirect_to([map, same_author_pin])
        end
      end

      context "with invalid params" do
        it "returns a success response (i.e. to display the 'edit' template)" do
          # titleとかでvalidateさせてから、再度テストする
          put :update, params: { map_id: map.id, id: same_author_pin.id, pin: invalid_attributes }, session: valid_session
          expect(response).to be_successful
        end
      end
    end

    describe "DELETE #destroy" do
      it "destroys the requested pin" do
        
        # same_author_pin をコメントアウトすると、テストが失敗します
        same_author_pin
        
        expect {
          delete :destroy, params: { map_id: map.id, id: same_author_pin.id }, session: valid_session
        }.to change(Pin, :count).by(-1)
      end

      it "redirects to the pins list" do
        delete :destroy, params: { map_id: map.id, id: same_author_pin.id }, session: valid_session
        expect(response).to redirect_to(map_pins_url)
      end
    end

  end

end
